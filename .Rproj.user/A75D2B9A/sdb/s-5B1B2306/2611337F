{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Hello Fresh\"\noutput: html_notebook\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(caret)\n```\n\n\n```{r}\ndata <- read.csv(\"UKretail.csv\")\nstr(data)\n```\n### Format date time, remove cancelled orders.\n```{r}\ndf<-data\ndf$InvoiceDate <-as_datetime((df$InvoiceDate))\ndf$OrderValue <- df$Quantity * df$UnitPrice\ndf<- df %>% filter(!grepl(\"^C\",InvoiceNo))\nstr(df)\n```\n### Aggregate by CustomerID and InvoiceID :\n```{r}\n\n\n\ndf.per.CustomerID.InvoiceID <- df %>% group_by(CustomerID,InvoiceNo,InvoiceDate,Country) %>% summarise(TotalValue=sum(OrderValue)) \ndf.per.CustomerID.InvoiceID<- df.per.CustomerID.InvoiceID %>% group_by(CustomerID)  %>% mutate(PreviousInvoiceDate = lag(InvoiceDate))\ndf.per.CustomerID.InvoiceID <- df.per.CustomerID.InvoiceID %>%  arrange(desc(InvoiceDate)) %>% mutate(order_sequence=row_number())\ndf.per.CustomerID.InvoiceID$ReorderLeadTime<-df.per.CustomerID.InvoiceID$InvoiceDate-df.per.CustomerID.InvoiceID$PreviousInvoiceDate\n\n```\n\n### group per cohort\n```{r}\ndf.firstInvoice <-df %>%\n  group_by(CustomerID) %>%\n  arrange(InvoiceDate) %>%\n  filter(row_number()==1 )\n\ndf.firstInvoice$cohort<- as.Date(floor_date(df.firstInvoice$InvoiceDate, \"month\"))\ngroupy_cohort<- df.firstInvoice %>% group_by(cohort) %>% summarise(total_customers=n())\n\nggplot(data=groupy_cohort,aes(x=cohort,y=total_customers))+geom_bar(stat = \"identity\")\n```\n\nThe first cohort (first invoice in December 2010) should not be taken into account, as it also include  Customers having first ordered before 1st December 2010.\n\n### Frequency and Value of Orders per cohort\n```{r}\n\n\ndf.per.CustomerID <- merge(x=df.per.CustomerID.InvoiceID,y=df.firstInvoice[, c(\"CustomerID\",\"cohort\")],by=\"CustomerID\",all.x=TRUE)\n\ndf.per.CustomerID<-df.per.CustomerID%>% filter(cohort>\"2010-12-01\" & cohort<\"2011-12-01\" )\n\ngroupy_frequency <- df.per.CustomerID %>% filter(!is.na(ReorderLeadTime)) %>%  group_by(CustomerID,cohort) %>% summarise(average.ReorderLeadTime=mean(ReorderLeadTime),number_orders=n(), orders_value=mean(TotalValue))\n\ngroupy_frequency_cohort<- groupy_frequency %>% group_by(cohort) %>% summarise(average.ReorderLeadTime=mean(average.ReorderLeadTime),average.Orders=mean(number_orders),average_orders_value=mean(orders_value))\n\n\nggplot(data=groupy_frequency_cohort,aes(x=cohort,y=average.ReorderLeadTime))+ geom_bar(stat = \"identity\")\n\nggplot(data=groupy_frequency_cohort,aes(x=cohort,y=average.Orders))+ geom_bar(stat = \"identity\")\n\nggplot(data=groupy_frequency_cohort,aes(x=cohort,y=average_orders_value))+ geom_bar(stat = \"identity\")\n```\n### Number of orders per cohort\n```{r}\n\nggplot(data =groupy_frequency,aes(x=cohort,y=number_orders,group=cohort)) + geom_boxplot()\n```\n### Importance of the country for the order value\n### Data preparation\n```{r}\ngroupy_country <- df.per.CustomerID.InvoiceID %>% group_by(CustomerID,Country) %>% summarise(average_order_value = mean(TotalValue), number_orders = n())\nggplot(data=groupy_country %>% filter(average_order_value<2000),aes(x=Country,y=(average_order_value)))+geom_boxplot()+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))\n\nggplot(data=groupy_country %>% filter(number_orders<500) ,aes(x=Country,y=(number_orders)))+geom_boxplot()+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))\n\nmean(groupy_country$number_orders)\n```\nAccording to this chart, the order value seems to be correlated with the country of origin. We can thus keep this feature as a good predictor for the next Order Value.\nWhen looking at the distribution of orders per customer for each country, with the exception of EIRE, the average number of order is around 5.\n\n\n\n\n### Define products categories\n\n```{r}\ngroupy.StockCode<- df %>% group_by(StockCode) %>% summarise(TotalOrderValue = sum(OrderValue)) %>% arrange(desc(TotalOrderValue)) %>% top_n(100,TotalOrderValue)\nlength(unique(df$StockCode))\nsum(groupy.StockCode$TotalOrderValue)/sum(df$OrderValue)\nggplot(data=groupy.StockCode,aes(x=(reorder(StockCode, TotalOrderValue)),y=TotalOrderValue))+geom_bar(stat = \"identity\")+theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))\n\ntop.selling.products<- groupy.StockCode$StockCode\n```\n The top 100 Products (2.5% of the total catalog) accounts to one third of the total TurnOver, we could as a matter of keeping it simple, define a new variable for each customer and each order, whether he did order one of those items.\n \nIdeally, we should cluster the StockCode to define groups of buying profiles, but given the number of features (3937), such a sparse matrix would be hard to handle on a laptop.\nAn other approach would to be define sub-groups of product (Bags, Boxes, Pen, etc...) using word vectorization on the variable Description.\n\n\n### Influence of the ReorderLeadtime on the average Order Value\n```{r}\ngroupy_reoderLT_orderValue <- df.per.CustomerID.InvoiceID %>% group_by(CustomerID) %>% summarise(average_LT=as.numeric(mean(ReorderLeadTime,na.rm=TRUE)), average_order_value=mean(TotalValue,na.rm=TRUE)) %>% filter(!is.na(average_LT)) %>% filter(average_order_value<2000)\n\nggplot(data=groupy_reoderLT_orderValue,aes(x=log(average_LT+1),y=average_order_value)) + geom_point(alpha=0.2)+ geom_smooth(method = 'lm')\n\ncor(groupy_reoderLT_orderValue$average_LT,groupy_reoderLT_orderValue$average_order_value)\n```\nThe average reorder leadtime and the average order value are very weakly correlated, we can exclude this feature from the predictors.\n\n#### Influence of the day of the week and hour of the day on the order value\n\n```{r}\ndf$dayofweek <- as.factor(wday(df$InvoiceDate))\ndf$hourofday <- as.factor(hour(df$InvoiceDate))\nggplot(df %>% sample_n(3000),aes(x=dayofweek,y=hourofday,size=OrderValue,color=Country))+ geom_jitter(alpha=0.3)\nmodel<-lm(OrderValue~dayofweek+hourofday,data=df)\nsummary(model)\n```\n\n\n### Data preparation\n\nSet a table with for each customerID :\n- average order value,\n- total order value,\n- number of orders,\n- cohort (as category),\n- n to n-5 orders value (as category),\n- country (as category)\n- ordered top selling product(boolean)\n\n\n#### Create a table of average order value and total order value per Customer\n```{r}\ndf.orders<-df.per.CustomerID.InvoiceID %>% group_by(CustomerID) %>% summarise(average_order_value = mean(TotalValue), number_orders=n(), total_order_value = sum(TotalValue))\n```\n\n#### Create a table of last n orders values per Customer\n```{r}\nquantile(df.orders$number_orders,probs = .90)\n\ndf.orders.sequence<-df.per.CustomerID.InvoiceID %>% filter(order_sequence<10) %>% spread(order_sequence,TotalValue)\ndf.orders.sequence<-df.orders.sequence %>%\n  group_by(CustomerID) %>%\n  summarise_each(funs(ifelse(sum(is.na(.)==FALSE)==0, NA, .[which(is.na(.)==FALSE)])), matches(\"[1-9]\"))\n\ncolnames(df.orders.sequence) <- paste(\"order_sequence\", colnames(df.orders.sequence), sep = \"_\")\nnames(df.orders.sequence)[names(df.orders.sequence) == 'order_sequence_CustomerID'] <- 'CustomerID'\ndf.orders.sequence <- df.orders.sequence %>%\n      mutate_each(funs(replace(., is.na(.), 0)), -CustomerID)\n\ndf.orders.sequence <- df.orders.sequence %>% mutate_each(funs(log(.+1)),-CustomerID)\n\n```\n#### Create a table of cohorts categories:\n```{r}\ndf.cohort<- df.firstInvoice %>% select(CustomerID,cohort)\ndf.cohort$cohort<-as.character(df.cohort$cohort)\n# dummify the data\ndmy <- dummyVars(\" ~ .\", data = df.cohort,)\ndf.cohort <- data.frame(predict(dmy, newdata = df.cohort))\ndf.cohort\n```\n\n#### Create a table of countries category\n```{r}\ndf.countries <- df.firstInvoice %>% select(CustomerID,Country)\ndf.countries$Country<-as.character(df.countries$Country)\n# dummify the data\ndmy <- dummyVars(\" ~ .\", data = df.countries)\ndf.countries <- data.frame(predict(dmy, newdata = df.countries))\ndf.countries\n```\n#### Check if Customer ordered one of the top sellig items :\n```{r}\ndf$top.selling <- df$StockCode %in% as.character(top.selling.products)\ntable(df$top.selling)\ndf.top.selling<-df %>% select(CustomerID,top.selling) %>% group_by(CustomerID) %>% summarise(top.selling.purchase=n())\n```\n\n#### Combine all data in a single table\n\n```{r}\ndf.final<- merge(x=df.orders,y=df.cohort,by=\"CustomerID\",all.x=TRUE)\ndf.final <- merge(x=df.final,y=df.orders.sequence,by=\"CustomerID\",all.x=TRUE)\ndf.final <- merge(df.final,df.countries,by=\"CustomerID\",all.x=TRUE)\ndf.final <- merge(df.final,df.top.selling,by=\"CustomerID\",all.x=TRUE)\n\nwrite.csv(df.final,'ukretail_dataset.csv')\n```\n### Features validation\n\nWe can make a rough check whether our choice of predictor is reasonable:\n```{r}\nmodel<-lm(log(order_sequence_1+1)~.-CustomerID,data=df.final)\nsummary(model)\n```\n\n",
    "created" : 1497969586364.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "103759765",
    "id" : "2611337F",
    "lastKnownWriteTime" : 1498053715,
    "last_content_update" : 1498053715775,
    "path" : "~/workspace/helloFresh/helloFresh_dataExploration.Rmd",
    "project_path" : null,
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}